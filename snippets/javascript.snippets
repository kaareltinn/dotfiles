snippet cstse "createStructuredSelector"
				export default connect(
					createStructuredSelector({
						${0:${VISUAL}}: ${2:${VISUAL}},
					})
				)(YourComponent)

snippet csta "createStandardAction"
				export const $1 = createStandardAction('$2')<$3>()

snippet impcsta "import createStandardAction"
				import { createStandardAction } from 'typesafe-actions'

snippet thkact "ThunkAction"
				export const $1: ThunkAction<$3> = async(dispatch, getState) => {
					$2
				}

snippet impthkact "import ThunkAction"
				import { ThunkAction } from 'src/lib/redux-thunk'

snippet imp18n "import I18n"
				import I18n from 'src/lib/i18n'

snippet impcrre "import createReduxer"
				import { createReducer } from 'typesafe-actions'

snippet crre "createReduxer"
				export const $1 = createReducer<$3>($4)
					.handleAction(actions.$2, (state, action) => action.payload)

snippet rrcc "React Redux Class Component"
				import React, { PureComponent } from 'react'
				import { connect } from 'react-redux'
				import { createStructuredSelector } from 'reselect'

				type Props = {
				}

				class $1 extends PureComponent<Props> {
					render = () => (
					)
				}

				export default connect(
					createStructuredSelector({}),
					{}
				)($1)

snippet rcc "React Class Component"
				import React, { PureComponent } from 'react'

				type Props = {
				}

				export default class $1 extends PureComponent<Props> {
					render = () => (
					)
				}

snippet gvn "given"
				given('$1', () => $2)

snippet gvnsub "given"
				given('subject', () => $1)

snippet rct "React Component Test"
				import React from 'react'
				import { shallow } from 'enzyme'

				import { $1 } from './$1'

				describe('<$1 />', () => {
					given('component', () => shallow(<$1 {...given.props} />))
					given('props', () => ({}))

					it('renders', () => {
						expect(given.component).toMatchSnapshot()
					})
				})

snippet rtlc "React Testing Library Component"
				import { render, screen } from '@testing-library/react'
				import React from 'react'
				import { Provider } from 'react-redux'

				import { mockStore } from 'src/shared/mocks'

				const mockDispatch = jest.fn()

				jest.mock('react-redux', () => ({
					...jest.requireActual('react-redux'),
					useDispatch: () => mockDispatch,
				}))

				describe('<$1 />', () => {
					given('mockedStore', () => mockStore({

					}))

					given('component', () => (
						<Provider store={given.mockedStore}>
							<$1 />
						</Provider>
					))

					it('renders', () => {
						render(given.component)

						expect(screen.getByText('some text')).toBeInTheDocument()
					})
				})

snippet rencompsnap "Component snapshot render test"
				it('renders', () => {
					expect(given.component).toMatchSnapshot()
				})
